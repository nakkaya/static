Static is a simple static site generator written in Clojure. For a
sample site build using static see [[http://nakkaya.com][nakkaya.com]]

* Features

  Static can parse org-mode and markdown files.

* Dependencies

  Static requires the [[https://github.com/technomancy/leiningen][leiningen]] build tool. Once installed, you can
  build Static with the following commands from within the project
  directory structure:

  #+BEGIN_EXAMPLE
    $ lein deps
    $ lein uberjar
  #+END_EXAMPLE

* Usage

  Creating a static site usually involves the following,

   -  Set up the basic structure of the site
   -  Create some posts
   -  Run your site locally to see how it looks
   -  Deploy your site

  A basic static site usually looks something like this:

  #+BEGIN_EXAMPLE
    .
    |-- config.clj
    `-- resources
       |-- posts
       |   |-- 2009-04-17-back-up-and-restore-a-mysql-database.markdown
       |   |-- 2010-02-10-a-simple-clojure-irc-client.markdown
       |   `-- 2010-08-02-using-clojure-contrib-generic-interfaces.markdown
       |-- public
       |   `-- 404.html
       |-- site
       |   `-- index.markdown
       `-- templates
           `-- default.clj
  #+END_EXAMPLE

  An overview of what each of these does:

** config.clj

   Contains a vector of configuration options.

     -  :site-title - Title of the site.
     -  :site-description - Description of the site.
     -  :site-url - URL of the site.
     -  :author-name - Name of the author.
     -  :author-email - E-mail address of the author.
     -  :copyright-year - Year the pages were created/copyrighted.
     -  :in-dir - Directory containing site content by default /resources//
     -  :out-dir - Directory to save compiled files.
     -  :atomic-build - When set, will build the site on a temporary
        directory first then move that directory to :out-dir.
     -  :default-template - Default template to use.
     -  :encoding - Encoding to use for read write operations.
     -  :posts-per-page - Number of posts in latest post pages.
     -  :blog-as-index - If true use blog as index.
     -  :emacs - path to emacs if you want to render .org files.
     -  :emacs-eval - elisp code to be evaluated on the emacs process.
     -  :host - remote host to deploy to.
     -  :user - remote username
     -  :deploy-dir - Remote directory to deploy to.
     -  :rsync - path to rsync if you want to deploy with rsync.

   The variables can later be reused (for example in your default template) as:

   #+BEGIN_SRC clojure
     (:author-name (static.config/config))
   #+END_SRC

** posts/

   Folder containing posts, the format of these files are important, as
   named as /YEAR-MONTH-DATE-title.MARKDOWN/.

** public/

   Folder containing static data such as images, css, javascript etc.
   Folder structure will be mirrored exactly.

** site/

   Folder containing pages that are not posts.

** templates/

   Folder containing templates that are used to render posts and pages
   with.

* Markup

  Supported markup languages,

   - markdown
   - org-mode (via emacs)
   - clojure (hiccup)
   - cssgen
   - html

** Setting per page/post settings

   Setting the template, title etc, for a page/post is done using a
   header placed at the top of the file,

*** org-mode

    #+BEGIN_EXAMPLE
      ,#+title: Blogging Like a Hacker
      ,#+tags: clojure
    #+END_EXAMPLE

*** Markdown

    #+BEGIN_EXAMPLE
      ---
      template: temp-en.clj
      title: Blogging Like a Hacker
      ---
    #+END_EXAMPLE

*** Clojure

    #+BEGIN_SRC clojure
      {:title "Blogging Like a Hacker"}
    #+END_SRC

*** cssgen

    cssgen does not support file-specific settings.

** Page/Post Settings

    - template - If set, this specifies the template file to use. Use the
      layout file name with file extension. Layout files must be
      placed in the *templates* directory.
    - title - Override the use of default title.
    - alias - Generates redirect pages for posts with aliases
      set. (["/first-alias/index.html", "/second-alias/index.html"])
      Place the full path of the alias (place to redirect from) inside
      the destination post.

   Any other setting you provide can be accessed from within your
   template.

* Installation

  You need to place the uberjar lein created to the folder containing
  config.clj.

** Building the site

   #+BEGIN_EXAMPLE
     java -jar static-app.jar --build
   #+END_EXAMPLE

** Testing the site

   You can test the site locally using jetty, which will launch on http://localhost:8080. 
   The site will rebuild if you change any of the source files.

   #+BEGIN_EXAMPLE
     java -jar static-app.jar --watch
   #+END_EXAMPLE

   In order to run just jetty,

   #+BEGIN_EXAMPLE
     java -jar static-app.jar --jetty
   #+END_EXAMPLE

** Deploying the site
*** RSYNC

    #+BEGIN_EXAMPLE
      $ java -jar static-app.jar --rsync
    #+END_EXAMPLE

* Code

  You can grab the latest version from the [[https://github.com/nakkaya/static][repo]].

  For bug reports/fixes/help, see [[http://nakkaya.com/contact.html][contact]].

  Any feature requests are also welcome see [[http://nakkaya.com/contact.html][contact]].

* License

  Copyright (C) 2010 - 2017

  BSD 2-Clause License
  
  Copyright (c) 2017, Nurullah Akkaya
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  
  - Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  
  - Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
